import networkx


# Linie 520

# 520001000000 = {"Kamenz, Bhf."}                                      Liste Haltestellennamen + ID's (Nodes) Linie 520
# 520002000000 = {"Kamenz, Klosterkirche St. Annen"}
# 520003000000 = {"Kamenz, Bautzner Str."}
# 520004000000 = {"Kamenz, Hohe Str. / Fichtestr."}
# 520005000000 = {"Kamenz, Hohe Str./ Forststr."}
# 520006000000 = {"Kamenz, Malteser-Krkhs."}
# 520008000000 = {"Nebelschütz, Hauptstr."}
# 520009000000 = {"Wendischbaselitz, Nebelschützer Str."}
# 520010000000 = {"Schmeckwitz, Dorfstr."}
# 520011000000 = {"Höflein, Dorfplatz"}),
# 111111000000 = {"Caseritz"}                                        --> Caseritz = Umsteigepunkt zw. Linien 520 u. 521
# 520013000000 = {"Crostwitz, Hornigstr."}                                (hieraus resultiert abweichende Nummerierung)
# 520014000000 = {"Jessnitz"}
# 520015000000 = {"Puschwitz"}
# 520016000000 = {"Wetro, Feuerfestwerke"}
# 520017000000 = {"Neschwitz, Bautzener Str."}
# 520018000000 = {"Schwarzadler (B96)"}
# 520019000000 = {"Cölln (B96)"}
# 520020000000 = {"Kleinwelka, Großdubrauer Str."}
# 520021000000 = {"Teichnitz, Großdubrauer Str."}
# 520022000000 = {"Bautzen, Dresdener Str."}
# 520023000000 = {"Bautzen, Schiller-Gymnasium"}
# 520024000000 = {"Bautzen, Bahnhof"}


# Linie 521

# 521001000000 = {"Bischofswerda, Bahnhof"}                            Liste Haltestellennamen + ID's (Nodes) Linie 521
# 521002000000 = {"Schönbrunn, Burkauer Str."}
# 521003000000 = {"Burkau"}
# 521004000000 = {"Burkau, Gewerbegebiet Ost"}
# 521005000000 = {"Säuritz, Dorfstr."}
# 521006000000 = {"Kaschwitz, Landstr."}
# 521007000000 = {"Ostro, Kirchstr."}
# 521008000000 = {"Cannewitz"}
# 521009000000 = {"Schweinerden"}
# 521010000000 = {"Panschwitz-Kuckau, Kloster"}
# 521011000000 = {"Crostwitz, Cisinskistr."}
# 111111000000 = {"Caseritz"}                                        --> Caseritz = Umsteigepunkt zw. Linien 520 u. 521
# 521013000000 = {"Räckelwitz, Hauptstr."}                                (hieraus resultiert abweichende Nummerierung)
# 521014000000 = {"Neudörfel, Horkaer Str."}
# 521015000000 = {"Rosenthal, Wallfahrtskirche"}
# 521016000000 = {"Schmerlitz"}
# 521017000000 = {"Döbra, Kastanienweg"}
# 521018000000 = {"Oßling"}
# 521019000000 = {"Wittichenau, Markt"}
# 521020000000 = {"Hoyerswerda, Bahnhof"})


G = networkx.Graph()                                                  # Initialisierung "leerer" Graph G (f. Linie 520)
H = networkx.Graph()                                                  # Initialisierung "leerer" Graph H (f. Linie 521)

G.add_nodes_from([(
520001000000, 520002000000, 520003000000, 520004000000, 520005000000, 520006000000, 520008000000,
520009000000, 520010000000, 520011000000, 111111000000, 520013000000, 520014000000, 520015000000,
520016000000, 520017000000, 520018000000, 520019000000, 520020000000, 520021000000, 520022000000,
520023000000, 520024000000
)])                                                        # Nodes (Haltestellen ID's als "Knoten") in Graph G einfügen

H.add_nodes_from([(
521001000000, 521002000000, 521003000000, 521004000000, 521005000000, 521006000000, 521007000000,
521008000000, 521009000000, 521010000000, 521011000000, 111111000000, 521013000000, 521014000000,
521015000000, 521016000000, 521017000000, 521018000000, 521019000000, 521020000000
)])                                                        # Nodes (Haltestellen ID's als "Knoten") in Graph H einfügen


G.add_edges_from([
(520001000000, 520002000000), (520002000000, 520003000000), (520003000000, 520004000000),
(520004000000, 520005000000), (520005000000, 520006000000), (520006000000, 520007000000),
(520007000000, 520008000000), (520008000000, 520009000000), (520009000000, 520010000000),
(520010000000, 520011000000), (520011000000, 111111000000), (111111000000, 520013000000),
(520013000000, 520014000000), (520014000000, 520015000000), (520015000000, 520016000000),
(520016000000, 520017000000), (520017000000, 520018000000), (520018000000, 520019000000),
(520019000000, 520020000000), (520020000000, 520021000000), (520021000000, 520022000000),
(520022000000, 520023000000), (520002000000, 520001000000), (520003000000, 520002000000),
(520004000000, 520003000000), (520005000000, 520004000000), (520006000000, 520005000000),
(520007000000, 520006000000), (520008000000, 520007000000), (520009000000, 520008000000),
(520010000000, 520009000000), (520011000000, 520010000000), (111111000000, 520011000000),
(520013000000, 111111000000), (520014000000, 520013000000), (520015000000, 520014000000),
(520016000000, 520015000000), (520017000000, 520016000000), (520018000000, 520017000000),
(520019000000, 520018000000), (520020000000, 520019000000), (520021000000, 520020000000),
(520022000000, 520021000000), (520023000000, 520022000000)
])                                                                               # Edges ("Kanten") in Graph G einfügen


H.add_edges_from([
(521001000000, 521002000000), (521002000000, 521003000000), (521003000000, 521004000000),
(521004000000, 521005000000), (521005000000, 521006000000), (521006000000, 521007000000),
(521007000000, 521008000000), (521008000000, 521009000000), (521009000000, 521010000000),
(521010000000, 521011000000), (521011000000, 111111000000), (111111000000, 521013000000),
(521013000000, 521014000000), (521014000000, 521015000000), (521015000000, 521016000000),
(521016000000, 521017000000), (521017000000, 521018000000), (521018000000, 521019000000),
(521019000000, 521020000000), (521002000000, 521001000000), (521003000000, 521002000000),
(521004000000, 521003000000), (521005000000, 521004000000), (521006000000, 521005000000),
(521007000000, 521006000000), (521008000000, 521007000000), (521009000000, 521008000000),
(521010000000, 521009000000), (521011000000, 521010000000), (111111000000, 521011000000),
(521013000000, 111111000000), (521014000000, 521013000000), (521015000000, 521014000000),
(521016000000, 521015000000), (521017000000, 521016000000), (521018000000, 521017000000),
(521019000000, 521018000000), (521020000000, 521019000000)
])                                                                               # Edges ("Kanten") in Graph G einfügen


F = networkx.Graph()                                        # Initialisierung "leerer" Graph F (f. späteres Gesamtnetz)

F.add_nodes_from(G)                                                                        # Hinzufügen der Nodes aus G
F.add_nodes_from(H)                                                                        # Hinzufügen der Nodes aus H

F.add_weighted_edges_from([
(520001000000, 520002000000, 0.369), (520002000000, 520003000000, 0.329), (520003000000, 520004000000, 0.587),
(520004000000, 520005000000, 0.704), (520005000000, 520006000000, 0.898), (520006000000, 520007000000, 2.530),
(520007000000, 520008000000, 1.150), (520008000000, 520009000000, 1.860), (520009000000, 520010000000, 1.360),
(520010000000, 520011000000, 0.891), (520011000000, 111111000000, 1.520), (111111000000, 520013000000, 2.540),
(520013000000, 520014000000, 1.180), (520014000000, 520015000000, 0.980), (520015000000, 520016000000, 2.500),
(520016000000, 520017000000, 4.870), (520017000000, 520018000000, 1.830), (520018000000, 520019000000, 1.420),
(520019000000, 520020000000, 1.790), (520020000000, 520021000000, 1.080), (520021000000, 520022000000, 0.671),
(520022000000, 520023000000, 0.478), (520002000000, 520001000000, 0.369), (520003000000, 520002000000, 0.329),
(520004000000, 520003000000, 0.587), (520005000000, 520004000000, 0.704), (520006000000, 520005000000, 0.898),
(520007000000, 520006000000, 2.530), (520008000000, 520007000000, 1.150), (520009000000, 520008000000, 1.860),
(520010000000, 520009000000, 1.360), (520011000000, 520010000000, 0.891), (111111000000, 520011000000, 1.520),
(520013000000, 111111000000, 2.540), (520014000000, 520013000000, 1.180), (520015000000, 520014000000, 0.980),
(520016000000, 520015000000, 2.500), (520017000000, 520016000000, 4.870), (520018000000, 520017000000, 1.830),
(520019000000, 520018000000, 1.420), (520020000000, 520019000000, 1.790), (520021000000, 520020000000, 1.080),
(520022000000, 520021000000, 0.671), (520023000000, 520022000000, 0.478), (521001000000, 521002000000, 3.400),
(521002000000, 521003000000, 2.860), (521003000000, 521004000000, 0.821), (521004000000, 521005000000, 1.370),
(521005000000, 521006000000, 1.740), (521006000000, 521007000000, 1.370), (521007000000, 521008000000, 1.100),
(521008000000, 521009000000, 0.900), (521009000000, 521010000000, 1.290), (521010000000, 521011000000, 2.710),
(521011000000, 111111000000, 1.130), (111111000000, 521013000000, 1.270), (521013000000, 521014000000, 1.000),
(521014000000, 521015000000, 2.390), (521015000000, 521016000000, 1.870), (521016000000, 521017000000, 4.780),
(521017000000, 521018000000, 2.790), (521018000000, 521019000000, 6.110), (521019000000, 521020000000, 5.420),
(521002000000, 521001000000, 3.400), (521003000000, 521002000000, 2.860), (521004000000, 521003000000, 0.821),
(521005000000, 521004000000, 1.370), (521006000000, 521005000000, 1.740), (521007000000, 521006000000, 1.370),
(521008000000, 521007000000, 1.100), (521009000000, 521008000000, 0.900), (521010000000, 521009000000, 1.290),
(521011000000, 521010000000, 2.710), (111111000000, 521011000000, 1.130), (521013000000, 111111000000, 1.270),
(521014000000, 521013000000, 1.000), (521015000000, 521014000000, 2.390), (521016000000, 521015000000, 1.870),
(521017000000, 521016000000, 4.780), (521018000000, 521017000000, 2.790), (521019000000, 521018000000, 6.110),
(521020000000, 521019000000, 5.420)
])                                      # "gewichtete" Kanten (= Menge der Kanten aus G und H, jeweils mit Länge in km)
                                        # zu Graph F hinzufügen. Muster: (Knoten 1, Knoten 2, Länge) --> "Hin"-Paket,
                                        # (Knoten 2, Knoten 1, Länge) --> "Rück"-Paket (Länge identisch).
                                        # sämtliche Entfernungsangaben kommen für jede Linie also doppelt vor.


print(F.size(weight="weight"))  # Summe aller Längen ("weights") in F, Länge d. Strckennetzes: Resultat geteilt durch 2



E = networkx.Graph()                  # Initialisierung "leerer" Graph E ("Container" f. Resultat aus Fahrplanauskunft)

list_1 = networkx.shortest_path(F, 520016000000, 521020000000)
print(list_1)
E.add_nodes_from(list_1)                                      # Kürzester von A nach B (Grundlage für Fahrplanauskunft)

print(E)                                                            # Anzahl der Haltestellen (inkl. Ein- und Ausstieg)
